«REM»
/*
*   Copyright 2011 Bahadýr AKIN
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.
*/
«ENDREM»
«IMPORT org::xtext::senior::project::protocol»

«EXTENSION templates::Extensions»

«DEFINE main FOR PDLFile»
    «EXPAND definitionsPath FOR this.definition»
    «EXPAND buildProtocolClass FOR this»
    «EXPAND buildProtocolTestClass FOR this»
«ENDDEFINE»

«REM»Classes from definitions are generating below here«ENDREM»
«DEFINE definitionsPath FOR Definitions»
    «EXPAND defines FOREACH this.sources »
«ENDDEFINE»

«REM»Alice, Bob and Trent like class'es are generating«ENDREM»
«DEFINE defines FOR EventSource»
    «IF this.keyword.compareTo("Participant") == 0»
        «EXPAND generateParticipantJava FOR this»
    «ELSEIF this.keyword.compareTo("Arbitrator") == 0»
        «EXPAND generateArbitratorJava FOR this»
    «ENDIF»
«ENDDEFINE»

«REM»Alice, Bob like classes generating below.«ENDREM»
«DEFINE generateParticipantJava FOR Define»
    «FILE "com/generated/java/source/"+this.name+".java"»
package com.generated.java.source;

import protocol.cipher.BaseCipher;
import example.protocol.message.Message;
import source.Participant;

public class «this.name»<Cipher extends BaseCipher> extends «this.keyword»<Message, Cipher>{

    public «this.name»(Cipher cipher) {
        super(cipher);
    }
    /*
    @Override
    public void sendMessage(Message msg) {
        setChanged();
        notifyObservers(msg);
    }
    */

}
    «ENDFILE»
«ENDDEFINE»

«REM»Trent like classes are generaing below«ENDREM»
«DEFINE generateArbitratorJava FOR Define»
    «FILE "com/generated/java/source/"+this.name+".java"»
package com.generated.java.source;

import java.util.Hashtable;

import protocol.cipher.BaseCipher;
import example.protocol.message.Message;
import source.Arbitrator;

public class «this.name»<Cipher extends BaseCipher> extends
        «this.keyword»<Message, Cipher> {
    
    public «this.name»(Alice<Cipher> alice, Bob<Cipher> bob) {
    // Alice And Bob Must be generated... How to get The Generated Class Names???
        super(new Hashtable<String, Cipher>());
        super.addCipher(Alice.class.getSimpleName(), alice.getCipher());
        super.addCipher(Bob.class.getSimpleName(), bob.getCipher());
    }

    public «this.name»(Hashtable<String, Cipher> cipherTable) {
        super(cipherTable);
    }
    
    public Trent(){
        super(new Hashtable<String, Cipher>());
    }

    @Override
    public void sendMessage(Message msg) {
        setChanged();
        notifyObservers(msg);
    }

}
    «ENDFILE»
«ENDDEFINE»

«REM»The Main Part is Starting here. MyBigProtocol.java building by using both Transactions and States.«ENDREM»
«DEFINE buildProtocolClass FOR PDLFile»
        «FILE "com/generated/java/source/protocol/"+this.name+".java"»
package com.generated.java.source.protocol;

import com.generated.java.source.*;

import java.util.Observable;
import java.util.Observer;

import protocol.cipher.BaseCipher;

import example.protocol.message.Message;

public class «this.name»<Cipher extends BaseCipher> implements Observer{
    
    «REM»MyBigProtocol.java class has attributes which are deifned in Definition area«ENDREM»
    «EXPAND buildProtocolAttributes FOREACH this.definition.sources»
    
    «REM»So does Constructors are binded to Definition area because of attributes«ENDREM»
    «EXPAND buildProtocolConstructor(this.name) FOR this.definition»
    
    public void init(){
    «EXPAND buildInitMethod(this.definition.message) FOREACH this.state.states»
    }
    «REM»We need an update method in order to implement Observer interface«ENDREM»    
    @Override
    public void update(Observable o, Object arg) {
       «EXPAND createMessage FOR this.definition.message»
       «REM»updateMethod builds by using State area, But state area using Transactions. So transactions building as private methods«ENDREM»
       «REM»First SendsEvents Generating«ENDREM»
       «EXPAND buildSendsEvents(this.definition.message, this.state.getStatesWithSendsEvent()) FOREACH this.state.getStatesWithSendsEvent()»
       «REM»Second GetEvents Generating«ENDREM»
       «EXPAND buildGetEvents(this.definition.message, this.state.getStatesWithGetEvent()) FOREACH this.state.getStatesWithGetEvent()»
    }
    
    «REM»Private methods generating from transactions in order to serve update method«ENDREM»
    «EXPAND buildPrivateMethodsFromTransactions FOREACH this.transaction.transactions»
}
    «ENDFILE»
«ENDDEFINE»

«REM»Building Protocol Attributes«ENDREM»
«DEFINE buildProtocolAttributes FOR EventSource»
        private «this.name»<Cipher> «this.name.toLowerCase()» = null;
«ENDDEFINE»

«REM»Building Protocol Constructor.. First Constructor Argumants THEN assign args to attrb«ENDREM»
«DEFINE buildProtocolConstructor(String name) FOR Definitions»
    public «name» («EXPAND buildConstructorParameters(this.sources) FOREACH  this.sources»){
        «EXPAND assingnParametersToAttributes FOREACH this.sources»
        init();
    }
«ENDDEFINE»

«REM»Protocol Constructor Argumants«ENDREM»
«DEFINE buildConstructorParameters(List[EventSource] sources) FOR EventSource»
    «IF this.keyword.compareTo("Participant") == 0»
        «this.name» «this.name.toLowerCase()»
    «ELSEIF this.keyword.compareTo("Arbitrator") == 0»
        «this.name» «this.name.toLowerCase()»
    «ENDIF»
    «EXPAND isComma(sources) FOR this»
«ENDDEFINE»

«DEFINE isComma(List[EventSource] sources) FOR EventSource»
    «IF sources.indexOf(this) + 1 != sources.size»
        ,
    «ENDIF»
«ENDDEFINE»

«REM»Assigning Constructor Args to Attrb«ENDREM»
«DEFINE assingnParametersToAttributes FOR EventSource»
        this.«this.name.toLowerCase()» = «this.name.toLowerCase()»;
        this.«this.name.toLowerCase()».addObserver(this);    
«ENDDEFINE»

«REM»Building Private Methods for Protocol with using Transactions«ENDREM»
«DEFINE buildPrivateMethodsFromTransactions FOR Transaction»
    private void «this.name» («EXPAND buildMethodArguments(this.arguments) FOREACH this.arguments»){
        System.out.println("TRANSACION: «this.name»");
        «EXPAND buildMethodOperation FOREACH this.operations»
    }
«ENDDEFINE»

«DEFINE buildMethodArguments(List arguments) FOR Argument»
    «IF arguments.size != (arguments.indexOf(this) + 1) »
    «this.keyword» «this.name»,
    «ELSE»
    «this.keyword» «this.name»
    «ENDIF»
«ENDDEFINE»

«REM»Building INIT method using InýtState«ENDREM»
«DEFINE buildInitMethod(Message message) FOR State»
    «IF Init.isInstance(this.event)»
        «EXPAND buildGuards(message) FOREACH this.guards»
    «ENDIF»
«ENDDEFINE»

«DEFINE createMessage FOR Message»
    «this.keyword» «this.name.toLowerCase()» = («this.keyword») arg;
«ENDDEFINE»

«REM»Building Protocols updateMethod Using States And Events Except INIT state«ENDREM»
«DEFINE buildSendsEvents(Message message, List[State] states) FOR State»
    // SENDS EVENT
    if( o instanceof «((SendsEvent)this.event).who.name» ){
        «EXPAND buildGuards(message) FOREACH this.guards»
    } 
    «IF (states.indexOf(this)+1) < states.size »
    else 
    «ENDIF»  
«ENDDEFINE»

«DEFINE buildGetEvents(Message message, List[State] states) FOR State»
    // GET EVENT
    if( «message.name.toLowerCase()».getTo().compareTo("«((GetEvent)this.event).who.name»") == 0){
        «EXPAND buildGuards(message) FOREACH this.guards»
    } 
    «IF (states.indexOf(this)+1) < states.size »
    else 
    «ENDIF»  
«ENDDEFINE»

«REM»BUILDING OPERATIONS ... REFERENCE TO ALL OPERATIONS«ENDREM»
«DEFINE buildMethodOperation FOR Operation»
    «IF Decrypt.isInstance(this)»
        «EXPAND decryptOperation FOR ((Decrypt)this)»
    «ELSEIF Encrypt.isInstance(this)»
        «EXPAND encryptOperation FOR ((Encrypt)this)»
    «ELSEIF Send.isInstance(this)»
        «EXPAND sendOperation FOR ((Send)this)»
    «ELSEIF Print.isInstance(this)»
        «EXPAND printOperation FOR ((Print)this)»
    «ELSEIF Call.isInstance(this)»
        «EXPAND callOperation FOR ((Call)this)»
    «ELSEIF Exchange.isInstance(this)»
        «EXPAND exchangeOperation FOR ((Exchange)this)»
    «ELSEIF Redirect.isInstance(this)»
        «EXPAND redirectOperation FOR ((Redirect)this)»
    «ENDIF»
«ENDDEFINE»

«DEFINE decryptOperation FOR Decrypt»
// DECRYPT
try{
    byte[] cryptedMessage = «this.message».getMessage();
    byte[] realMsg = «this.participant.name.toLowerCase()».getCipher().decrypt(cryptedMessage);
    «this.message».setMessage(realMsg);
   } catch(Exception e){
    e.printStackTrace();
   }
«ENDDEFINE»

«DEFINE encryptOperation FOR Encrypt»
// ENCRYPT
try{
    byte[] realMsg = «this.message».getMessage();
    byte[] cryptedMessage = «this.participant.name.toLowerCase()».getCipher().encrypt(realMsg);
    «this.message».setMessage(cryptedMessage);
    }catch(Exception e){
    e.printStackTrace();
    }
«ENDDEFINE»

«REM»DEFINING SEND operation«ENDREM»
«DEFINE sendOperation FOR Send»
    // SEND
    «this.message».setFrom(«this.source.name.toLowerCase()».getClass().getSimpleName());
    «this.message».setTo(«this.destination.name.toLowerCase()».getClass().getSimpleName());
    «this.source.name.toLowerCase()».sendMessage(«this.message»);
«ENDDEFINE»

«REM»Defining PRINT operation«ENDREM»
«DEFINE printOperation FOR Print»
    // PRINT
    System.out.println(«this.message».toString());
«ENDDEFINE»

«REM»Translation from CALL to java methodcall«ENDREM»
«DEFINE callOperation FOR Call»
    // CALL    
    «this.transactionName.name»(«EXPAND passArguments FOREACH this.args»);
«ENDDEFINE»

«REM»Passing arguments From CALL operation to a TRANSACTION«ENDREM»
«DEFINE passArguments FOR Define»
    «this.name.toLowerCase()»
«ENDDEFINE»

«REM»Definition of a EXCHANGE operation which is going to be changed«ENDREM»
«DEFINE exchangeOperation FOR Exchange»
    // EXCHANGE
    «this.destination.name.toLowerCase()».addCipher(«this.source.name.toLowerCase()».getClass().getSimpleName(),«this.source.name.toLowerCase()».getCipher());
«ENDDEFINE»

«DEFINE redirectOperation FOR Redirect»
    // REDIRECT
    «this.message.toLowerCase()».setTo(«this.destination.name.toLowerCase()».getClass().getSimpleName());
«ENDDEFINE»


«REM»GUARDS BUILDING ... REFERANCE TO ALL GUARD«ENDREM»
«DEFINE buildGuards(Message message) FOR Guard»   
    «IF Always.isInstance(this.casem)»
        «EXPAND buildMethodOperation FOR this.operation»
    «ELSE»
     if( «EXPAND buildCase(message) FOR this.casem»){
       «EXPAND buildMethodOperation FOR this.operation»
     }
    «ENDIF» 
«ENDDEFINE»

«REM»OTHERWISE case not defined yet«ENDREM»
«DEFINE buildCase(Message message) FOR Case»
    «IF To.isInstance(this)»
       «message.name.toLowerCase()».getTo().compareTo("«((To)this).eventSource.name»") == 0
    «ELSEIF From.isInstance(this)»
        «message.name.toLowerCase()».getFrom().compareTo("«((From)this).eventSource.name»") == 0
    «ENDIF»
«ENDDEFINE»

«DEFINE buildProtocolTestClass FOR PDLFile»
    «FILE "com/generated/java/source/protocol/test/"+this.name+"Test.java"»
    package com.generated.java.source.protocol.test;

    import com.generated.java.source.*;
    import com.generated.java.source.protocol.*;

    import protocol.cipher.*;

    import example.protocol.message.Message;
    import example.protocol.message.ProtocolType;

    public class «this.name»Test implements Runnable{
        «EXPAND buildProtocolTestAttributes(this.definition.cipher) FOREACH this.definition.sources»
        «EXPAND buildProtocolSelfAttribute FOR this»
        
        public «this.name»Test(){
        
        }
        
    @Override
    public void run() {
        Message Msg = new Message(ProtocolType.None);
        Msg.setMessage("Bahadir Akin ITU");
        «EXPAND buildMethodOperation FOREACH this.test.operations»
        
    }
    
    public static void main(String[] args) {
        Thread thread = new Thread(new «this.name»Test());
        thread.start();
    }
}
    «ENDFILE»
«ENDDEFINE»

«DEFINE buildProtocolTestAttributes(Cipher cipher) FOR EventSource»
    «IF Participant.isInstance(this)»
    private «this.name»<«cipher.keyword»> «this.name.toLowerCase()» = new «this.name»<«cipher.keyword»>(new «cipher.keyword»("KeyOf«this.name»"));
    «ELSEIF Arbitrator.isInstance(this)»
    private «this.name»<«cipher.keyword»> «this.name.toLowerCase()» = new «this.name»<«cipher.keyword»>();
    «ENDIF»
«ENDDEFINE»

«DEFINE buildProtocolSelfAttribute FOR PDLFile»
    private «this.name»<«this.definition.cipher.keyword»> myBigProtocol = new «this.name»<«this.definition.cipher.keyword»>(«EXPAND getEventSourceNames(this.definition.sources) FOREACH this.definition.sources»);
«ENDDEFINE»


«DEFINE getEventSourceNames(List[EventSource] sources) FOR EventSource»
    «IF sources.indexOf(this) + 1 == sources.size»
        «this.name.toLowerCase()»
    «ELSE»
        «this.name.toLowerCase()»,
    «ENDIF»
«ENDDEFINE»