[MyBigProtocol]
[DEFINITIONS]
    Alice = Participant
    Bob = Participant
    Trent = Arbitrator
    MyCipher = AsynchronousCipher
    Msg = Message
[END]
[TRANSACTIONS]
    TRANSACTION trentFromAliceAction(Message m)
    [BEGIN]
        decrypt m for Alice
        encrypt m for Bob
        m :: Trent -> Bob
    [END]
    
    TRANSACTION trentFromBobAction(Message m)
    [BEGIN]
        decrypt m for Bob
        encrypt m for Alice
        m :: Trent -> Alice
    [END]
    
    TRANSACTION AliceAction(Message m)
    [BEGIN]
        decrypt m for Alice
        print m
    [END]
    
    TRANSACTION BobAction(Message m)
    [BEGIN]
        decrypt m for Bob
        print m
    [END]
[END]
[STATES]
    STATE State1 (INIT)
    [BEGIN]
        |always => Alice exchange Trent
        |always => Bob exchange Trent
    [END]
    STATE State2 (Trent GET Msg)
    [BEGIN]
        |from = Alice => CALL trentFromAliceAction(Msg)
        |from = Bob => CALL trentFromBobAction(Msg)
    [END]
    
    STATE State3 (Alice GET Msg)
    [BEGIN]
        |always => CALL AliceAction(Msg)
    [END]
    
    STATE State4 (Bob GET Msg)
    [BEGIN]
        |always => CALL BobAction(Msg)
    [END]
[END]
[END]