/*
*   Copyright 2011 Bahadýr AKIN
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.
*/
grammar org.xtext.senior.project.Protocol with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate protocol "http://www.xtext.org/senior/project/Protocol"

PDLFile:
    '['name=ID']'
    definition = Definitions
    transaction = Transactions
    state = States
    test = Test
    '[END]';

Definitions:
    '[DEFINITIONS]' 
     (sources+=EventSource)*
     cipher=Cipher
     message=Message
    '[END]';
    
    
// Works Like Interface
Define:
    EventSource | Cipher | Message;
    
EventSource:
    Arbitrator | Participant;
    
Arbitrator:
    name=ID '=' keyword='Arbitrator';

Participant:
    name=ID '=' keyword='Participant';
    
Cipher:
    name=ID '=' keyword= ('AsynchronousCipher' | 'SynchronousCipher');

Message:
    name=ID '=' keyword='Message';
    
Keyword:
    'Arbitrator' | 'Participant' | 'Message' | 'AsynchronousCipher' | 'SynchronousCipher';


Transactions:
     '[TRANSACTIONS]' 
     (transactions += Transaction )*
     '[END]' ;

Transaction:
     'TRANSACTION' name=ID '(' (arguments+=Argument)* ')'
     '[BEGIN]' 
      (operations+=Operation)*
     '[END]' ;

Argument:
    keyword=Keyword name=ID;

Operation:
    Decrypt | Encrypt | Send | Print | Call | Exchange | Redirect;

Decrypt:
    'decrypt' message=ID 'for' participant=[Participant];

Encrypt:
    'encrypt' message=ID 'for' participant=[Participant];

Send:
    message=ID '::' source=[EventSource] '->' destination=[EventSource];

Print:
    'print' message=ID;
    
Call:
    'CALL' transactionName=[Transaction] '(' args +=[Define]*')';
    
Exchange:
    source=[EventSource] 'exchange' destination=[EventSource];
    
Redirect:
    message=ID 'redirect' destination=[EventSource];

States:
     '[STATES]' 
     (states+=State)*
     '[END]' ;

State:
     'STATE' name=ID '(' event=Event ')'
     '[BEGIN]' 
     (guards+=Guard)*
     '[END]' ;
    
Guard:
     '|' casem=Case '=>' operation=Operation;

Event:
    GetEvent | IsSendEvent | Init | SendsEvent;

GetEvent:
    who=[Define] 'GET' message=[Message];
    
SendsEvent:
    who=[Define] 'SENDS' message=[Message];
    
IsSendEvent:
    message=[Message] 'IS_SEND';     
    
Init:
    keyword="INIT";

Case:
    Always | Otherwise | To | From;
   
Always:
    keyword='always';
    
Otherwise:
    keyword='otherwise';
    
To:
     keyword='to' '=' eventSource=[EventSource];

From:
     keyword='from' '=' eventSource=[EventSource];
     
Test:
    '[TEST]'
        (operations+=Operation)*
    '[END]';
    
