/*
* generated by Xtext
*/

package org.xtext.senior.project.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ProtocolGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PDLFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PDLFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPdlfileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionDefinitionsParserRuleCall_2_0 = (RuleCall)cDefinitionAssignment_2.eContents().get(0);
		private final Assignment cTransactionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransactionTransactionsParserRuleCall_3_0 = (RuleCall)cTransactionAssignment_3.eContents().get(0);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateStatesParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		
		//PDLFile:
		//	"pdlfile" name=ID definition=Definitions transaction=Transactions state=States;
		public ParserRule getRule() { return rule; }

		//"pdlfile" name=ID definition=Definitions transaction=Transactions state=States
		public Group getGroup() { return cGroup; }

		//"pdlfile"
		public Keyword getPdlfileKeyword_0() { return cPdlfileKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//definition=Definitions
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//Definitions
		public RuleCall getDefinitionDefinitionsParserRuleCall_2_0() { return cDefinitionDefinitionsParserRuleCall_2_0; }

		//transaction=Transactions
		public Assignment getTransactionAssignment_3() { return cTransactionAssignment_3; }

		//Transactions
		public RuleCall getTransactionTransactionsParserRuleCall_3_0() { return cTransactionTransactionsParserRuleCall_3_0; }

		//state=States
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }

		//States
		public RuleCall getStateStatesParserRuleCall_4_0() { return cStateStatesParserRuleCall_4_0; }
	}

	public class DefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINITIONSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsDefineParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Definitions:
		//	"[DEFINITIONS]" definitions+=Define* "[END]";
		public ParserRule getRule() { return rule; }

		//"[DEFINITIONS]" definitions+=Define* "[END]"
		public Group getGroup() { return cGroup; }

		//"[DEFINITIONS]"
		public Keyword getDEFINITIONSKeyword_0() { return cDEFINITIONSKeyword_0; }

		//definitions+=Define*
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }

		//Define
		public RuleCall getDefinitionsDefineParserRuleCall_1_0() { return cDefinitionsDefineParserRuleCall_1_0; }

		//"[END]"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSGnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeywordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeywordIDTerminalRuleCall_2_0 = (RuleCall)cKeywordAssignment_2.eContents().get(0);
		
		//Define:
		//	name=ID "=" keyword=ID;
		public ParserRule getRule() { return rule; }

		//name=ID "=" keyword=ID
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSGnKeyword_1() { return cEqualsSGnKeyword_1; }

		//keyword=ID
		public Assignment getKeywordAssignment_2() { return cKeywordAssignment_2; }

		//ID
		public RuleCall getKeywordIDTerminalRuleCall_2_0() { return cKeywordIDTerminalRuleCall_2_0; }
	}

	public class TransactionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transactions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRANSACTIONSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransactionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransactionsTransactionParserRuleCall_1_0 = (RuleCall)cTransactionsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Transactions:
		//	"[TRANSACTIONS]" transactions+=Transaction* "[END]";
		public ParserRule getRule() { return rule; }

		//"[TRANSACTIONS]" transactions+=Transaction* "[END]"
		public Group getGroup() { return cGroup; }

		//"[TRANSACTIONS]"
		public Keyword getTRANSACTIONSKeyword_0() { return cTRANSACTIONSKeyword_0; }

		//transactions+=Transaction*
		public Assignment getTransactionsAssignment_1() { return cTransactionsAssignment_1; }

		//Transaction
		public RuleCall getTransactionsTransactionParserRuleCall_1_0() { return cTransactionsTransactionParserRuleCall_1_0; }

		//"[END]"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class TransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRANSACTIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsArgumentParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Keyword cRGhtParenthesSKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cBEGINKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperationsOperationParserRuleCall_6_0 = (RuleCall)cOperationsAssignment_6.eContents().get(0);
		private final Keyword cENDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Transaction:
		//	"TRANSACTION" name=ID "(" arguments+=Argument* ")" "[BEGIN]" operations+=Operation* "[END]";
		public ParserRule getRule() { return rule; }

		//"TRANSACTION" name=ID "(" arguments+=Argument* ")" "[BEGIN]" operations+=Operation* "[END]"
		public Group getGroup() { return cGroup; }

		//"TRANSACTION"
		public Keyword getTRANSACTIONKeyword_0() { return cTRANSACTIONKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesSKeyword_2() { return cLeftParenthesSKeyword_2; }

		//arguments+=Argument*
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_3_0() { return cArgumentsArgumentParserRuleCall_3_0; }

		//")"
		public Keyword getRGhtParenthesSKeyword_4() { return cRGhtParenthesSKeyword_4; }

		//"[BEGIN]"
		public Keyword getBEGINKeyword_5() { return cBEGINKeyword_5; }

		//operations+=Operation*
		public Assignment getOperationsAssignment_6() { return cOperationsAssignment_6; }

		//Operation
		public RuleCall getOperationsOperationParserRuleCall_6_0() { return cOperationsOperationParserRuleCall_6_0; }

		//"[END]"
		public Keyword getENDKeyword_7() { return cENDKeyword_7; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordIDTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Argument:
		//	keyword=ID name=ID;
		public ParserRule getRule() { return rule; }

		//keyword=ID name=ID
		public Group getGroup() { return cGroup; }

		//keyword=ID
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//ID
		public RuleCall getKeywordIDTerminalRuleCall_0_0() { return cKeywordIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecryptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEncryptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSendParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Operation:
		//	Decrypt | Encrypt | Send | Print | Call;
		public ParserRule getRule() { return rule; }

		//Decrypt | Encrypt | Send | Print | Call
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decrypt
		public RuleCall getDecryptParserRuleCall_0() { return cDecryptParserRuleCall_0; }

		//Encrypt
		public RuleCall getEncryptParserRuleCall_1() { return cEncryptParserRuleCall_1; }

		//Send
		public RuleCall getSendParserRuleCall_2() { return cSendParserRuleCall_2; }

		//Print
		public RuleCall getPrintParserRuleCall_3() { return cPrintParserRuleCall_3; }

		//Call
		public RuleCall getCallParserRuleCall_4() { return cCallParserRuleCall_4; }
	}

	public class DecryptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decrypt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecryptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageIDTerminalRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParticipantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParticipantIDTerminalRuleCall_3_0 = (RuleCall)cParticipantAssignment_3.eContents().get(0);
		
		//Decrypt:
		//	"decrypt" message=ID "for" participant=ID;
		public ParserRule getRule() { return rule; }

		//"decrypt" message=ID "for" participant=ID
		public Group getGroup() { return cGroup; }

		//"decrypt"
		public Keyword getDecryptKeyword_0() { return cDecryptKeyword_0; }

		//message=ID
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//ID
		public RuleCall getMessageIDTerminalRuleCall_1_0() { return cMessageIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//participant=ID
		public Assignment getParticipantAssignment_3() { return cParticipantAssignment_3; }

		//ID
		public RuleCall getParticipantIDTerminalRuleCall_3_0() { return cParticipantIDTerminalRuleCall_3_0; }
	}

	public class EncryptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Encrypt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEncryptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageIDTerminalRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParticipantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParticipantIDTerminalRuleCall_3_0 = (RuleCall)cParticipantAssignment_3.eContents().get(0);
		
		//Encrypt:
		//	"encrypt" message=ID "for" participant=ID;
		public ParserRule getRule() { return rule; }

		//"encrypt" message=ID "for" participant=ID
		public Group getGroup() { return cGroup; }

		//"encrypt"
		public Keyword getEncryptKeyword_0() { return cEncryptKeyword_0; }

		//message=ID
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//ID
		public RuleCall getMessageIDTerminalRuleCall_1_0() { return cMessageIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//participant=ID
		public Assignment getParticipantAssignment_3() { return cParticipantAssignment_3; }

		//ID
		public RuleCall getParticipantIDTerminalRuleCall_3_0() { return cParticipantIDTerminalRuleCall_3_0; }
	}

	public class SendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Send");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMessageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMessageIDTerminalRuleCall_0_0 = (RuleCall)cMessageAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceIDTerminalRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Keyword cHyphenMNusGreaterThanSGnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDestinationIDTerminalRuleCall_4_0 = (RuleCall)cDestinationAssignment_4.eContents().get(0);
		
		//Send:
		//	message=ID "::" source=ID "->" destination=ID;
		public ParserRule getRule() { return rule; }

		//message=ID "::" source=ID "->" destination=ID
		public Group getGroup() { return cGroup; }

		//message=ID
		public Assignment getMessageAssignment_0() { return cMessageAssignment_0; }

		//ID
		public RuleCall getMessageIDTerminalRuleCall_0_0() { return cMessageIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//source=ID
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//ID
		public RuleCall getSourceIDTerminalRuleCall_2_0() { return cSourceIDTerminalRuleCall_2_0; }

		//"->"
		public Keyword getHyphenMNusGreaterThanSGnKeyword_3() { return cHyphenMNusGreaterThanSGnKeyword_3; }

		//destination=ID
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }

		//ID
		public RuleCall getDestinationIDTerminalRuleCall_4_0() { return cDestinationIDTerminalRuleCall_4_0; }
	}

	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageIDTerminalRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		
		//Print:
		//	"print" message=ID;
		public ParserRule getRule() { return rule; }

		//"print" message=ID
		public Group getGroup() { return cGroup; }

		//"print"
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }

		//message=ID
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//ID
		public RuleCall getMessageIDTerminalRuleCall_1_0() { return cMessageIDTerminalRuleCall_1_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCALLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransactionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransactionNameIDTerminalRuleCall_1_0 = (RuleCall)cTransactionNameAssignment_1.eContents().get(0);
		
		//Call:
		//	"CALL" transactionName=ID;
		public ParserRule getRule() { return rule; }

		//"CALL" transactionName=ID
		public Group getGroup() { return cGroup; }

		//"CALL"
		public Keyword getCALLKeyword_0() { return cCALLKeyword_0; }

		//transactionName=ID
		public Assignment getTransactionNameAssignment_1() { return cTransactionNameAssignment_1; }

		//ID
		public RuleCall getTransactionNameIDTerminalRuleCall_1_0() { return cTransactionNameIDTerminalRuleCall_1_0; }
	}

	public class StatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "States");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTATESKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//States:
		//	"[STATES]" states+=State* "[END]";
		public ParserRule getRule() { return rule; }

		//"[STATES]" states+=State* "[END]"
		public Group getGroup() { return cGroup; }

		//"[STATES]"
		public Keyword getSTATESKeyword_0() { return cSTATESKeyword_0; }

		//states+=State*
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_1_0() { return cStatesStateParserRuleCall_1_0; }

		//"[END]"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventEventParserRuleCall_3_0 = (RuleCall)cEventAssignment_3.eContents().get(0);
		private final Keyword cRGhtParenthesSKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cBEGINKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cGuardsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGuardsGuardParserRuleCall_6_0 = (RuleCall)cGuardsAssignment_6.eContents().get(0);
		private final Keyword cENDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//State:
		//	"STATE" name=ID "(" event=Event ")" "[BEGIN]" guards+=Guard* "[END]";
		public ParserRule getRule() { return rule; }

		//"STATE" name=ID "(" event=Event ")" "[BEGIN]" guards+=Guard* "[END]"
		public Group getGroup() { return cGroup; }

		//"STATE"
		public Keyword getSTATEKeyword_0() { return cSTATEKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesSKeyword_2() { return cLeftParenthesSKeyword_2; }

		//event=Event
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }

		//Event
		public RuleCall getEventEventParserRuleCall_3_0() { return cEventEventParserRuleCall_3_0; }

		//")"
		public Keyword getRGhtParenthesSKeyword_4() { return cRGhtParenthesSKeyword_4; }

		//"[BEGIN]"
		public Keyword getBEGINKeyword_5() { return cBEGINKeyword_5; }

		//guards+=Guard*
		public Assignment getGuardsAssignment_6() { return cGuardsAssignment_6; }

		//Guard
		public RuleCall getGuardsGuardParserRuleCall_6_0() { return cGuardsGuardParserRuleCall_6_0; }

		//"[END]"
		public Keyword getENDKeyword_7() { return cENDKeyword_7; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVertCalLNeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCasemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasemCaseParserRuleCall_1_0 = (RuleCall)cCasemAssignment_1.eContents().get(0);
		private final Keyword cEqualsSGnGreaterThanSGnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationOperationParserRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		
		//Guard:
		//	"|" casem=Case "=>" operation=Operation;
		public ParserRule getRule() { return rule; }

		//"|" casem=Case "=>" operation=Operation
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVertCalLNeKeyword_0() { return cVertCalLNeKeyword_0; }

		//casem=Case
		public Assignment getCasemAssignment_1() { return cCasemAssignment_1; }

		//Case
		public RuleCall getCasemCaseParserRuleCall_1_0() { return cCasemCaseParserRuleCall_1_0; }

		//"=>"
		public Keyword getEqualsSGnGreaterThanSGnKeyword_2() { return cEqualsSGnGreaterThanSGnKeyword_2; }

		//operation=Operation
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }

		//Operation
		public RuleCall getOperationOperationParserRuleCall_3_0() { return cOperationOperationParserRuleCall_3_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGetEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsSendEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Event:
		//	GetEvent | IsSendEvent;
		public ParserRule getRule() { return rule; }

		//GetEvent | IsSendEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//GetEvent
		public RuleCall getGetEventParserRuleCall_0() { return cGetEventParserRuleCall_0; }

		//IsSendEvent
		public RuleCall getIsSendEventParserRuleCall_1() { return cIsSendEventParserRuleCall_1; }
	}

	public class GetEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWhoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWhoIDTerminalRuleCall_0_0 = (RuleCall)cWhoAssignment_0.eContents().get(0);
		private final Keyword cGETKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeywordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeywordIDTerminalRuleCall_2_0 = (RuleCall)cKeywordAssignment_2.eContents().get(0);
		
		//GetEvent:
		//	who=ID "GET" keyword=ID;
		public ParserRule getRule() { return rule; }

		//who=ID "GET" keyword=ID
		public Group getGroup() { return cGroup; }

		//who=ID
		public Assignment getWhoAssignment_0() { return cWhoAssignment_0; }

		//ID
		public RuleCall getWhoIDTerminalRuleCall_0_0() { return cWhoIDTerminalRuleCall_0_0; }

		//"GET"
		public Keyword getGETKeyword_1() { return cGETKeyword_1; }

		//keyword=ID
		public Assignment getKeywordAssignment_2() { return cKeywordAssignment_2; }

		//ID
		public RuleCall getKeywordIDTerminalRuleCall_2_0() { return cKeywordIDTerminalRuleCall_2_0; }
	}

	public class IsSendEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsSendEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordIDTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cIS_SENDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsSendEvent:
		//	keyword=ID "IS_SEND";
		public ParserRule getRule() { return rule; }

		//keyword=ID "IS_SEND"
		public Group getGroup() { return cGroup; }

		//keyword=ID
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//ID
		public RuleCall getKeywordIDTerminalRuleCall_0_0() { return cKeywordIDTerminalRuleCall_0_0; }

		//"IS_SEND"
		public Keyword getIS_SENDKeyword_1() { return cIS_SENDKeyword_1; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlwaysParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOtherwiseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFromParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Case:
		//	Always | Otherwise | Source | From;
		public ParserRule getRule() { return rule; }

		//Always | Otherwise | Source | From
		public Alternatives getAlternatives() { return cAlternatives; }

		//Always
		public RuleCall getAlwaysParserRuleCall_0() { return cAlwaysParserRuleCall_0; }

		//Otherwise
		public RuleCall getOtherwiseParserRuleCall_1() { return cOtherwiseParserRuleCall_1; }

		//Source
		public RuleCall getSourceParserRuleCall_2() { return cSourceParserRuleCall_2; }

		//From
		public RuleCall getFromParserRuleCall_3() { return cFromParserRuleCall_3; }
	}

	public class AlwaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Always");
		private final Keyword cAlwaysKeyword = (Keyword)rule.eContents().get(1);
		
		//Always returns ecore::EString:
		//	"always";
		public ParserRule getRule() { return rule; }

		//"always"
		public Keyword getAlwaysKeyword() { return cAlwaysKeyword; }
	}

	public class OtherwiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Otherwise");
		private final Keyword cOtherwiseKeyword = (Keyword)rule.eContents().get(1);
		
		//Otherwise returns ecore::EString:
		//	"otherwise";
		public ParserRule getRule() { return rule; }

		//"otherwise"
		public Keyword getOtherwiseKeyword() { return cOtherwiseKeyword; }
	}

	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSGnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefineNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefineNameIDTerminalRuleCall_2_0 = (RuleCall)cDefineNameAssignment_2.eContents().get(0);
		
		//Source:
		//	"source" "=" defineName=ID;
		public ParserRule getRule() { return rule; }

		//"source" "=" defineName=ID
		public Group getGroup() { return cGroup; }

		//"source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//"="
		public Keyword getEqualsSGnKeyword_1() { return cEqualsSGnKeyword_1; }

		//defineName=ID
		public Assignment getDefineNameAssignment_2() { return cDefineNameAssignment_2; }

		//ID
		public RuleCall getDefineNameIDTerminalRuleCall_2_0() { return cDefineNameIDTerminalRuleCall_2_0; }
	}

	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSGnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefineNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefineNameIDTerminalRuleCall_2_0 = (RuleCall)cDefineNameAssignment_2.eContents().get(0);
		
		//From:
		//	"from" "=" defineName=ID;
		public ParserRule getRule() { return rule; }

		//"from" "=" defineName=ID
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//"="
		public Keyword getEqualsSGnKeyword_1() { return cEqualsSGnKeyword_1; }

		//defineName=ID
		public Assignment getDefineNameAssignment_2() { return cDefineNameAssignment_2; }

		//ID
		public RuleCall getDefineNameIDTerminalRuleCall_2_0() { return cDefineNameIDTerminalRuleCall_2_0; }
	}
	
	
	private PDLFileElements pPDLFile;
	private DefinitionsElements pDefinitions;
	private DefineElements pDefine;
	private TransactionsElements pTransactions;
	private TransactionElements pTransaction;
	private ArgumentElements pArgument;
	private OperationElements pOperation;
	private DecryptElements pDecrypt;
	private EncryptElements pEncrypt;
	private SendElements pSend;
	private PrintElements pPrint;
	private CallElements pCall;
	private StatesElements pStates;
	private StateElements pState;
	private GuardElements pGuard;
	private EventElements pEvent;
	private GetEventElements pGetEvent;
	private IsSendEventElements pIsSendEvent;
	private CaseElements pCase;
	private AlwaysElements pAlways;
	private OtherwiseElements pOtherwise;
	private SourceElements pSource;
	private FromElements pFrom;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProtocolGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PDLFile:
	//	"pdlfile" name=ID definition=Definitions transaction=Transactions state=States;
	public PDLFileElements getPDLFileAccess() {
		return (pPDLFile != null) ? pPDLFile : (pPDLFile = new PDLFileElements());
	}
	
	public ParserRule getPDLFileRule() {
		return getPDLFileAccess().getRule();
	}

	//Definitions:
	//	"[DEFINITIONS]" definitions+=Define* "[END]";
	public DefinitionsElements getDefinitionsAccess() {
		return (pDefinitions != null) ? pDefinitions : (pDefinitions = new DefinitionsElements());
	}
	
	public ParserRule getDefinitionsRule() {
		return getDefinitionsAccess().getRule();
	}

	//Define:
	//	name=ID "=" keyword=ID;
	public DefineElements getDefineAccess() {
		return (pDefine != null) ? pDefine : (pDefine = new DefineElements());
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}

	//Transactions:
	//	"[TRANSACTIONS]" transactions+=Transaction* "[END]";
	public TransactionsElements getTransactionsAccess() {
		return (pTransactions != null) ? pTransactions : (pTransactions = new TransactionsElements());
	}
	
	public ParserRule getTransactionsRule() {
		return getTransactionsAccess().getRule();
	}

	//Transaction:
	//	"TRANSACTION" name=ID "(" arguments+=Argument* ")" "[BEGIN]" operations+=Operation* "[END]";
	public TransactionElements getTransactionAccess() {
		return (pTransaction != null) ? pTransaction : (pTransaction = new TransactionElements());
	}
	
	public ParserRule getTransactionRule() {
		return getTransactionAccess().getRule();
	}

	//Argument:
	//	keyword=ID name=ID;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//Operation:
	//	Decrypt | Encrypt | Send | Print | Call;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Decrypt:
	//	"decrypt" message=ID "for" participant=ID;
	public DecryptElements getDecryptAccess() {
		return (pDecrypt != null) ? pDecrypt : (pDecrypt = new DecryptElements());
	}
	
	public ParserRule getDecryptRule() {
		return getDecryptAccess().getRule();
	}

	//Encrypt:
	//	"encrypt" message=ID "for" participant=ID;
	public EncryptElements getEncryptAccess() {
		return (pEncrypt != null) ? pEncrypt : (pEncrypt = new EncryptElements());
	}
	
	public ParserRule getEncryptRule() {
		return getEncryptAccess().getRule();
	}

	//Send:
	//	message=ID "::" source=ID "->" destination=ID;
	public SendElements getSendAccess() {
		return (pSend != null) ? pSend : (pSend = new SendElements());
	}
	
	public ParserRule getSendRule() {
		return getSendAccess().getRule();
	}

	//Print:
	//	"print" message=ID;
	public PrintElements getPrintAccess() {
		return (pPrint != null) ? pPrint : (pPrint = new PrintElements());
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}

	//Call:
	//	"CALL" transactionName=ID;
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//States:
	//	"[STATES]" states+=State* "[END]";
	public StatesElements getStatesAccess() {
		return (pStates != null) ? pStates : (pStates = new StatesElements());
	}
	
	public ParserRule getStatesRule() {
		return getStatesAccess().getRule();
	}

	//State:
	//	"STATE" name=ID "(" event=Event ")" "[BEGIN]" guards+=Guard* "[END]";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Guard:
	//	"|" casem=Case "=>" operation=Operation;
	public GuardElements getGuardAccess() {
		return (pGuard != null) ? pGuard : (pGuard = new GuardElements());
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//Event:
	//	GetEvent | IsSendEvent;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//GetEvent:
	//	who=ID "GET" keyword=ID;
	public GetEventElements getGetEventAccess() {
		return (pGetEvent != null) ? pGetEvent : (pGetEvent = new GetEventElements());
	}
	
	public ParserRule getGetEventRule() {
		return getGetEventAccess().getRule();
	}

	//IsSendEvent:
	//	keyword=ID "IS_SEND";
	public IsSendEventElements getIsSendEventAccess() {
		return (pIsSendEvent != null) ? pIsSendEvent : (pIsSendEvent = new IsSendEventElements());
	}
	
	public ParserRule getIsSendEventRule() {
		return getIsSendEventAccess().getRule();
	}

	//Case:
	//	Always | Otherwise | Source | From;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//Always returns ecore::EString:
	//	"always";
	public AlwaysElements getAlwaysAccess() {
		return (pAlways != null) ? pAlways : (pAlways = new AlwaysElements());
	}
	
	public ParserRule getAlwaysRule() {
		return getAlwaysAccess().getRule();
	}

	//Otherwise returns ecore::EString:
	//	"otherwise";
	public OtherwiseElements getOtherwiseAccess() {
		return (pOtherwise != null) ? pOtherwise : (pOtherwise = new OtherwiseElements());
	}
	
	public ParserRule getOtherwiseRule() {
		return getOtherwiseAccess().getRule();
	}

	//Source:
	//	"source" "=" defineName=ID;
	public SourceElements getSourceAccess() {
		return (pSource != null) ? pSource : (pSource = new SourceElements());
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}

	//From:
	//	"from" "=" defineName=ID;
	public FromElements getFromAccess() {
		return (pFrom != null) ? pFrom : (pFrom = new FromElements());
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
